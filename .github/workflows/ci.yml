name: Docker image CI
on: [push, pull_request]

env:
  packer_version: '1.7.3'
  image_name: 'packer-ansible'

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: lint
        uses: luke142367/Docker-Lint-Action@v1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target: Dockerfile

#   test:
#     name: Testing container execution
#     needs: lint
#     runs-on: ubuntu-18.04
#     steps:
# #---------------------step 02-01-----------------------
#       - uses: actions/checkout@v2
# #---------------------step 02-02-----------------------
#       - name: Cache Docker layers
#         uses: actions/cache@v2
#         with:
#           path: /tmp/.buildx-cache
#           key: ${{ runner.os }}-buildx-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-buildx-
# #---------------------step 02-03-----------------------
#       - name: Build - Stack
#         run: docker-compose up -d
# #---------------------step 02-04-----------------------
#       - name: Teste
#         run: docker run --network container:tika-server
#               appropriate/curl -s --retry 10
#               --retry-connrefused http://localhost:9998/

  scan:
    name: Image test
    needs: lint
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: |
          docker build -t ${{ env.image_name }} .
      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.image_name }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Test container execution
        run: |
          docker run ${{ env.image_name }} version | grep 'Packer v${{ env.packer_version }}'

# #------------------------------------------------------
# # job 04 - Build e Push do container para o Docker Hub
# #------------------------------------------------------
#   push:
#     name: Publica o Container
#     if: github.ref == 'refs/heads/main'
#     needs: scan
#     runs-on: ubuntu-18.04
#     steps:
# #---------------------step 04-01-----------------------
#       - name: Checkout
#         uses: actions/checkout@v2
# #---------------------step 04-02-----------------------
#       - name: Ativa QEMU
#         uses: docker/setup-qemu-action@v1
#         with:
#           platforms: linux/amd64
# #---------------------step 04-03-----------------------
#       - name: BuildX - Suporte remote-cache, secrets, etc...
#         id: buildx
#         uses: docker/setup-buildx-action@v1
# #---------------------step 04-04-----------------------
#       - name: Cache Docker layers
#         uses: actions/cache@v2
#         with:
#           path: /tmp/.buildx-cache
#           key: ${{ runner.os }}-buildx-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-buildx-
# #---------------------step 04-05-----------------------
#       - name: Login DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
# #---------------------step 04-06-----------------------
#       - name: Build and Push
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           context: .
#           file: ./Dockerfile
#           platforms: linux/amd64
#           push: true
#           tags: ${{ secrets.DOCKERHUB_ORGANIZATION }}/tika-server:${{ env.tika_version }}
#           cache-from: type=local,src=/tmp/.buildx-cache
#           cache-to: type=local,dest=/tmp/.buildx-cache
#           build-args: |
#               TIKA_VERSION=${{ env.tika_version }}
# #---------------------step 04-07-----------------------
#       - name: Digest
#         run: echo "Versão usada para fazer push do Tika é -> ${{ env.tika_version }}"